[tox]
min_version = 4.0
env_list =
    lint
    docs
    notebooks_doctests
    offline-prefetch
;    opt-slow
    py39-upstream-doctest
    py310
    py311
    py312-numba
labels =
    test = py39, py310-upstream-doctest, py311, notebooks_doctests, offline-prefetch
requires =
    pip >= 23.0
opts = -vv

[testenv:lint]
description = Run code quality compliance tests under {basepython}
skip_install = True
extras =
deps =
    flake8
    flake8-rst-docstrings
    black[jupyter]
    blackdoc
    isort
    nbqa
    ruff
    yamllint
commands_pre =
commands =
    black --check xclim tests
    isort --check xclim tests
    ruff xclim tests
    flake8 --config=.flake8 xclim tests
    nbqa black --check docs
    blackdoc --check --exclude=xclim/indices/__init__.py xclim
    blackdoc --check docs
    yamllint --config-file=.yamllint.yaml xclim
commands_post =

[testenv:docs]
description = Build the documentation with makefile under {basepython}
setenv =
    PYTHONPATH = {toxinidir}
    READTHEDOCS = 1
commands_pre =
commands =
    make docs
commands_post =
allowlist_externals =
    env
    make

# Requires tox-conda compatible with tox@v4.0
;[testenv:conda]
;description = Run tests with pytest under {basepython} (Anaconda distribution)
;conda_channels = conda-forge
;conda_env = environment-dev.yml
;extras =

[testenv:notebooks_doctests{-coverage,}]
description = Run notebooks and doctests with pytest under {basepython}
commands =
    pytest --no-cov --nbval --dist=loadscope --rootdir=tests/ --ignore=docs/notebooks/example.ipynb docs/notebooks
    pytest --rootdir=tests/ --xdoctest xclim

# Requires tox-conda compatible with tox@v4.0
;[testenv:opt-{slow,not_slow}]
;description = Run tests with optional requirements (SBCK (experimental), eofs) and pytest under {basepython} (Anaconda distribution)
;conda_env = environment-dev.yml
;commands =
;    pip check
;    !slow: pytest xclim -m "not slow" --durations=10
;    slow: pytest xclim --durations=10

[testenv:offline{-prefetch,}{-coverage,}]
description = Run tests with pytest under {basepython}, preventing socket connections (except for unix sockets for async support)
commands:
    prefetch: xclim prefetch_testing_data
    python -c 'print("Running offline tests with positional arguments: --disable-socket --allow-unix-socket --m \"not requires_internet\"")'
    python -c 'print("These can be overwritten with: tox -e offline -- -m \"some other marker statement\"")'
    pytest --disable-socket --allow-unix-socket {posargs:-m 'not requires_internet'}
allowlist_externals =
    xclim

[testenv]
description = Run tests with pytest under {basepython}
setenv =
    COV_CORE_SOURCE =
    PYTEST_ADDOPTS = --numprocesses=logical --durations=10
    coverage: PYTEST_ADDOPTS = --numprocesses=logical --durations=10 --cov=xclim --cov-report=term-missing
    PYTHONPATH = {toxinidir}
    Xfrozen_modules = off
passenv =
    CI
    CONDA_EXE
    COVERALLS_*
    GITHUB_*
    LD_LIBRARY_PATH
    SKIP_NOTEBOOKS
    XCLIM_*
extras = dev
deps =
    # FIXME: Remove when numba 0.59.0 is released
    numba: numba==0.59.0rc1
    numba: llvmlite==0.42.0rc1
    coverage: coveralls
    upstream: -rrequirements_upstream.txt
    eofs: eofs
    sbck: pybind11
install_command = python -m pip install --no-user {opts} {packages}
download = True
commands_pre =
    sbck: python -m pip install sbck
    python -m pip list
    xclim show_version_info
    python -m pip check
commands =
    doctest: pytest --no-cov --rootdir=tests/ --xdoctest xclim
    pytest {posargs}
commands_post =
    coverage: - coveralls
allowlist_externals =
    git
